LIBRARY ieee;
USE IEEE.STD_LOGIC_1164.ALL;


ENTITY VCRPlayer	IS
	PORT(
		Reset				:IN STD_LOGIC;
		Clock				:IN STD_LOGIC;
		
	--Inputs
		Play				:IN STD_LOGIC;
		Pause				:IN STD_LOGIC;
		Stop				:IN STD_LOGIC;
		RecordV			:IN STD_LOGIC;
		Forward			:IN STD_LOGIC;
		Rewind			:IN STD_LOGIC;
		TapeLoaded		:IN STD_LOGIC;
		TapeStart		:IN STD_LOGIC;
		TapeEnd			:IN STD_LOGIC;
		WriteProtect   :IN STD_LOGIC;
		Done				:IN STD_LOGIC;
		Ready				:IN STD_LOGIC;
			
	-- Outputs
		Increment		:OUT STD_LOGIC;
		Decrement		:OUT STD_LOGIC;
		ResetCount		:OUT STD_LOGIC;
		WriteMessage	:OUT STD_LOGIC;
		Load				:OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
		Message			:OUT STD_LOGIC_VECTOR (3 DOWNTO 0)
	);
END;

ARCHITECTURE behavorial OF VCRPlayer IS

	CONSTANT STOPPED			:STD_LOGIC_VECTOR(2 DOWNTO 0) := "000";
	CONSTANT PAUSED			:STD_LOGIC_VECTOR(2 DOWNTO 0) := "001";
	CONSTANT PLAYING			:STD_LOGIC_VECTOR(2 DOWNTO 0) := "011";
	CONSTANT FORWARDING		:STD_LOGIC_VECTOR(2 DOWNTO 0) := "100";
	CONSTANT REWINDING		:STD_LOGIC_VECTOR(2 DOWNTO 0) := "110";
	CONSTANT RECORDING		:STD_LOGIC_VECTOR(2 DOWNTO 0) := "111";
	
	SIGNAL NextState			:STD_LOGIC_VECTOR(2 DOWNTO 0);
	SIGNAL CurrentState		:STD_LOGIC_VECTOR(2 DOWNTO 0);
	
BEGIN
	PROCESS(Clock)
		BEGIN
			IF(rising_edge(Clock)) THEN   ---Reset, increment and decrement are synchronous
				IF(Reset = '0') THEN
					CurrentState <= STOPPED;
				ELSE
					CurrentState <= NextState;
				END IF;
			END IF;
	END PROCESS;
	
	
	
	
	
END;
